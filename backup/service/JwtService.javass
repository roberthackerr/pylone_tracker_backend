package com.example.demo.service;

import java.security.Key;
import java.util.Base64.Decoder;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.codec.Base64;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

public class JwtService {
    //extraction nah claims aloha 
    public Claims extrAllClaims(String token){
        return Jwts
        .parser()
        .setSigningKey(getSignKey())
        .parseClaimsJws(token)
        .getBody();
    }
    public Key getSignKey(){
        @SuppressWarnings("deprecation")
        byte[] keyBt=Base64.decode(SECREt_KEY);
        return Keys.hmacShaFor(keyBt);
    }
    public <T> T extrClaims(String token,Function<Claims,T> claimsResolver){
        final Claims claims=extrAllClaims(token);
        return claimsResolver.apply(claims);
    }
    public String extractUsername(String jwt) {
        return extrClaims(jwt, Claims::getSubject)
    }

    public String generateToken(Map<String,Object> extraClaims,UserDetails userDetails){
        return Jwts
        .builder()
        .setClaims(extraClaims)
        .setSubject(userDetails.getUsername())
        .setIssueAt(new Date(System.currentTimeMillis()))
        .setExpiration(new Date(System.currentTimeMillis()*1000*60*24))
        .signWith(getSignKey(),SignatureAlgorithm.HS256)

    }
    public String generateToken(String token){
        return generateToken(new HashMap<>(),userDetails )
    }

}
